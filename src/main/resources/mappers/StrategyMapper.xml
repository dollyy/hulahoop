<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yc.hulahoop.dao.StrategyMapper">
    <resultMap id="BaseResultMap" type="com.yc.hulahoop.pojo.Strategy">
        <constructor>
            <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="city_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="duration" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="content" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="main_img" jdbcType="VARCHAR" javaType="java.lang.String"/>
            <arg column="for_num" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="collect_num" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        </constructor>
    </resultMap>
    <sql id="Base_Column_List">
        id, user_id, name, city_id, duration, content, main_img, for_num, collect_num, create_time,
        update_time
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from strategies
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE FROM strategies
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.yc.hulahoop.pojo.Strategy" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO strategies (id, user_id, name,
                                city_id, duration, content,
                                main_img, for_num, collect_num,
                                create_time, update_time)
        VALUES (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
                                        #{cityId,jdbcType=INTEGER}, #{duration,jdbcType=VARCHAR},
                                        #{content,jdbcType=VARCHAR}, #{mainImg,jdbcType=VARCHAR},
                                        0, 0, now(), now())
    </insert>
    <insert id="insertSelective" parameterType="com.yc.hulahoop.pojo.Strategy">
        insert into strategies
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="cityId != null">
                city_id,
            </if>
            <if test="duration != null">
                duration,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="mainImg != null">
                main_img,
            </if>
            <if test="forNum != null">
                for_num,
            </if>
            <if test="collectNum != null">
                collect_num,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="cityId != null">
                #{cityId,jdbcType=INTEGER},
            </if>
            <if test="duration != null">
                #{duration,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="mainImg != null">
                #{mainImg,jdbcType=VARCHAR},
            </if>
            <if test="forNum != null">
                #{forNum,jdbcType=INTEGER},
            </if>
            <if test="collectNum != null">
                #{collectNum,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                now(),
            </if>
            <if test="updateTime != null">
                now(),
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.yc.hulahoop.pojo.Strategy">
        update strategies
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="cityId != null">
                city_id = #{cityId,jdbcType=INTEGER},
            </if>
            <if test="duration != null">
                duration = #{duration,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="mainImg != null">
                main_img = #{mainImg,jdbcType=VARCHAR},
            </if>
            <if test="forNum != null">
                for_num = #{forNum,jdbcType=INTEGER},
            </if>
            <if test="collectNum != null">
                collect_num = #{collectNum,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = now(),
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yc.hulahoop.pojo.Strategy">
        UPDATE strategies
        SET user_id     = #{userId,jdbcType=INTEGER},
            name        = #{name,jdbcType=VARCHAR},
            city_id     = #{cityId,jdbcType=INTEGER},
            duration    = #{duration,jdbcType=VARCHAR},
            content     = #{content,jdbcType=VARCHAR},
            main_img    = #{mainImg,jdbcType=VARCHAR},
            for_num     = #{forNum,jdbcType=INTEGER},
            collect_num = #{collectNum,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = now()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <select id="recommendStrategies" resultType="com.yc.hulahoop.vo.StrategyVo">
        SELECT
        s.id AS strategyId,
        s.main_img AS mainImg,
        u.username,
        s.name AS strategyName,
        c.name AS cityName,
        s.duration,
        DATE_FORMAT(s.create_time, '%Y-%m-%d %T') AS createTime
        FROM strategies s
        JOIN users u ON s.user_id = u.id
        JOIN cities c ON s.city_id = c.id
        <where>
            <if test="strategyId != null">
                AND s.id IN
                <foreach collection="strategyId" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <select id="latestStrategies" resultType="com.yc.hulahoop.vo.StrategyVo">
        SELECT
            s.id                                      AS strategyId,
            s.main_img                                AS mainImg,
            u.username,
            s.name                                    AS strategyName,
            c.name                                    AS cityName,
            s.duration,
            DATE_FORMAT(s.create_time, '%Y-%m-%d %T') AS createTime
        FROM strategies s
            JOIN users u ON s.user_id = u.id
            JOIN cities c ON s.city_id = c.id
        ORDER BY s.create_time DESC
        LIMIT 1, 8
    </select>

    <select id="hottestStrategies" resultType="com.yc.hulahoop.vo.StrategyVo">
        SELECT
            s.id                                      AS strategyId,
            s.main_img                                AS mainImg,
            u.username,
            s.name                                    AS strategyName,
            c.name                                    AS cityName,
            s.duration,
            DATE_FORMAT(s.create_time, '%Y-%m-%d %T') AS createTime
        FROM strategies s
            JOIN users u ON s.user_id = u.id
            JOIN cities c ON s.city_id = c.id
        ORDER BY s.collect_num DESC, s.for_num DESC
        LIMIT 1, 8
    </select>

    <select id="list" parameterType="map" resultType="com.yc.hulahoop.vo.StrategyVo">
        SELECT s.id AS strategyId,
        s.main_img AS mainImg,
        u.avatar,
        u.username,
        s.name AS strategyName,
        c.name AS cityName,
        s.duration
        FROM strategies s
        JOIN users u ON s.user_id=u.id
        JOIN cities c ON s.city_id=c.id
        <where>
            <if test="cityId != null">
                city_id=#{cityId}
            </if>
            <if test="duration != null">
                AND duration=#{duration}
            </if>
        </where>
        order by s.id
    </select>

    <select id="detail" parameterType="int" resultType="com.yc.hulahoop.vo.StrategyVo">
        SELECT
            s.id   AS strategyId,
            s.content,
            c.name AS cityName,
            s.duration,
            s.name AS strategyName,
            u.id AS userId,
            u.username,
            s.for_num AS forNum,
            s.collect_num AS collectNum
        FROM strategies s
            JOIN cities c ON s.city_id = c.id
            JOIN users u ON s.user_id = u.id
        WHERE s.id = #{strategyId}
    </select>

    <delete id="deleteByUserIdAndStrategyId" parameterType="map">
        DELETE FROM strategies
        WHERE user_id = #{userId}
        <if test="strategyList != null">
            AND id IN
            <foreach collection="strategyList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </delete>

    <delete id="deleteByAdmin" parameterType="map">
        DELETE FROM strategies
        <where>
            <if test="strategyList != null">
                id IN
                <foreach collection="strategyList" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </delete>

    <update id="updateByUserIdAndStrategyId" parameterType="map">
        UPDATE strategies
        <set>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="cityId != null">
                city_id = #{cityId},
            </if>
            <if test="duration != null">
                duration = #{duration},
            </if>
            <if test="content != null">
                content = #{content},
            </if>
            <if test="mainImg != null">
                main_img = #{mainImg},
            </if>
        </set>
        WHERE user_id=#{userId} AND id=#{id}
    </update>

    <update id="updateForOrCollect" parameterType="map">
        UPDATE strategies
        <set>
            <if test="forNum != null">
                for_num=#{forNum}
            </if>
            <if test="collectNum != null">
                collect_num=#{collectNum}
            </if>
        </set>
        WHERE id=#{id}
    </update>

    <resultMap id="userStrategy" type="com.yc.hulahoop.vo.UserStrategyVo">
        <id column="city_id" property="cityId"/>
        <result column="cityName" property="cityName"/>
        <collection ofType="com.yc.hulahoop.vo.StrategyVo" property="strategyVoList">
            <result column="strategyId" property="strategyId"/>
            <result column="strategyName" property="strategyName"/>
            <result column="duration" property="duration"/>
            <result column="mainImg" property="mainImg"/>
        </collection>
    </resultMap>

    <select id="queryUserStrategy" parameterType="int" resultMap="userStrategy">
        SELECT
            s.id       AS strategyId,
            s.name     AS strategyName,
            s.duration,
            city_id,
            c.name     AS cityName,
            s.main_img AS mainImg
        FROM strategies s
            JOIN cities c ON s.city_id = c.id
        WHERE user_id = #{userId}
    </select>

    <select id="countUserStrategy" parameterType="map" resultType="int">
        SELECT count(*)
        FROM strategies
        WHERE user_id = #{userId} AND city_id = #{cityId}
    </select>

    <select id="selectAllDurations" resultType="string">
        SELECT duration
        FROM strategies
        GROUP BY duration
        ORDER BY duration
    </select>

    <select id="searchByAdmin" resultType="com.yc.hulahoop.vo.StrategyVo">
        SELECT
            s.id       AS strategyId,
            s.main_img AS mainImg,
            u.avatar,
            u.username,
            s.name     AS strategyName,
            c.name     AS cityName,
            s.duration
        FROM strategies s
            JOIN users u ON s.user_id = u.id
            JOIN cities c ON s.city_id = c.id
        WHERE s.name LIKE #{content} OR s.content LIKE #{content} OR user_id IN (SELECT id
                                                                                 FROM users
                                                                                 WHERE username LIKE #{content})
    </select>

    <select id="queryStrategyCount" resultType="int">
        SELECT count(*)
        FROM strategies
    </select>

</mapper>