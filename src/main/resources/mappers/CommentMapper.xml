<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yc.hulahoop.dao.CommentMapper">
    <resultMap id="BaseResultMap" type="com.yc.hulahoop.pojo.Comment">
        <constructor>
            <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="level" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="parent" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="sequence" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
            <arg column="for_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="against_num" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>
    <sql id="Base_Column_List">
        id, user_id, content, level, parent, sequence, create_time, for_num, against_num
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from comments
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE FROM comments
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.yc.hulahoop.pojo.Comment">
        INSERT INTO comments (id, user_id, content,
                              level, parent, sequence,
                              create_time, for_num, against_num
        )
        VALUES (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR},
                #{level,jdbcType=VARCHAR}, #{parent,jdbcType=VARCHAR}, #{sequence,jdbcType=INTEGER},
                now(), 0, 0
        )
    </insert>
    <insert id="insertSelective" parameterType="com.yc.hulahoop.pojo.Comment">
        insert into comments
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="level != null">
                level,
            </if>
            <if test="parent != null">
                parent,
            </if>
            <if test="sequence != null">
                sequence,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="forNum != null">
                for_num,
            </if>
            <if test="againstNum != null">
                against_num,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                #{level,jdbcType=VARCHAR},
            </if>
            <if test="parent != null">
                #{parent,jdbcType=VARCHAR},
            </if>
            <if test="sequence != null">
                #{sequence,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                now(),
            </if>
            <if test="forNum != null">
                #{forNum,jdbcType=INTEGER},
            </if>
            <if test="againstNum != null">
                #{againstNum,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.yc.hulahoop.pojo.Comment">
        update comments
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                level = #{level,jdbcType=VARCHAR},
            </if>
            <if test="parent != null">
                parent = #{parent,jdbcType=VARCHAR},
            </if>
            <if test="sequence != null">
                sequence = #{sequence,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="forNum != null">
                for_num = #{forNum,jdbcType=INTEGER},
            </if>
            <if test="againstNum != null">
                against_num = #{againstNum,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yc.hulahoop.pojo.Comment">
        UPDATE comments
        SET user_id     = #{userId,jdbcType=INTEGER},
            content     = #{content,jdbcType=VARCHAR},
            level       = #{level,jdbcType=VARCHAR},
            parent      = #{parent,jdbcType=VARCHAR},
            sequence    = #{sequence,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            for_num     = #{forNum,jdbcType=INTEGER},
            against_num = #{againstNum,jdbcType=INTEGER}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <select id="listByStrategyId" resultType="com.yc.hulahoop.vo.CommentVo">
        SELECT
            c.id,
            c.level,
            c.parent,
            u.avatar,
            u.id          AS responseId,
            u.username    AS responseName,
            c.content,
            c.create_time AS createTime,
            c.for_num     AS forNum,
            c.against_num AS againstNum
        FROM comments c
            JOIN users u ON c.user_id = u.id
        WHERE c.strategy_id = #{strategyId}
        ORDER BY level
    </select>

    <select id="queryRequestUser" resultType="com.yc.hulahoop.pojo.User">
        SELECT
            u.id,
            u.username
        FROM comments c
            JOIN users u ON c.user_id = u.id
        WHERE level = #{parent}
    </select>

    <select id="querySequenceByAdd" resultType="int">
        SELECT count(*)
        FROM comments
        WHERE level LIKE '_'
    </select>

    <select id="querySequenceByReply" parameterType="string" resultType="int">
        SELECT count(*)
        FROM comments
        WHERE level LIKE #{parent}
    </select>
</mapper>